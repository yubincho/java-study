-- Question 테이블에 무작위 데이터 삽입
INSERT INTO QUESTION (subject, content, created_at) VALUES
('Spring Boot는 무엇인가요?', 'Spring Boot에 대한 설명을 부탁드립니다.', CURRENT_TIMESTAMP()),
('JPA란 무엇인가요?', 'JPA에 대해 알고 싶습니다.', CURRENT_TIMESTAMP()),
('Spring Security는 무엇인가요?', 'Spring Security의 개념과 사용법에 대해 알려주세요.', CURRENT_TIMESTAMP()),
('스프링 AOP란?', '스프링 AOP에 대해 설명해주세요.', CURRENT_TIMESTAMP()),
('REST API란 무엇인가요?', 'REST API에 대해 알고 싶습니다.', CURRENT_TIMESTAMP()),
('마이크로서비스 아키텍처란?', '마이크로서비스 아키텍처에 대해 설명해주세요.', CURRENT_TIMESTAMP()),
('Hibernate와 JPA의 차이점은?', 'Hibernate와 JPA는 어떻게 다른가요?', CURRENT_TIMESTAMP()),
('스프링에서 트랜잭션 관리란?', '스프링에서 트랜잭션 관리에 대해 설명해주세요.', CURRENT_TIMESTAMP()),
('Spring Cloud는 무엇인가요?', 'Spring Cloud의 개념과 사용법에 대해 알고 싶습니다.', CURRENT_TIMESTAMP()),
('스프링 배치란?', '스프링 배치의 개념과 사용법에 대해 설명해주세요.', CURRENT_TIMESTAMP());

-- Answer 테이블에 무작위 데이터 삽입
INSERT INTO ANSWER (content, created_at, question_id) VALUES
('Spring Boot는 스프링 프레임워크를 기반으로 한 독립 실행형 애플리케이션 개발을 위한 도구입니다.', CURRENT_TIMESTAMP(), 1),
('스프링 부트는 설정을 최소화하고 생산성을 높이는 데 중점을 둡니다.', CURRENT_TIMESTAMP(), 1),
('JPA는 자바 객체와 데이터베이스 테이블 간의 매핑을 지원하는 ORM 기술입니다.', CURRENT_TIMESTAMP(), 2),
('JPA는 데이터베이스 독립성을 제공하며, 객체 지향적으로 데이터베이스를 다룰 수 있게 해줍니다.', CURRENT_TIMESTAMP(), 2),
('Spring Security는 스프링 기반의 보안 프레임워크로, 인증 및 권한 부여 기능을 제공합니다.', CURRENT_TIMESTAMP(), 3),
('스프링 시큐리티는 보안 관련 다양한 기능을 제공하며, 웹 애플리케이션 및 마이크로서비스 보안에 사용됩니다.', CURRENT_TIMESTAMP(), 3),
('스프링 AOP는 관점 지향 프로그래밍을 지원하는 모듈로, 횡단 관심사를 분리하여 코드의 재사용성을 높입니다.', CURRENT_TIMESTAMP(), 4),
('AOP는 로깅, 보안, 트랜잭션 관리 등 다양한 분야에서 활용될 수 있습니다.', CURRENT_TIMESTAMP(), 4),
('REST API는 HTTP를 통해 애플리케이션 간에 데이터를 주고받기 위한 아키텍처 스타일입니다.', CURRENT_TIMESTAMP(), 5),
('REST는 리소스 기반의 접근 방식을 취하며, HTTP 메서드를 사용하여 CRUD 작업을 수행합니다.', CURRENT_TIMESTAMP(), 5),
('마이크로서비스 아키텍처는 단일 애플리케이션을 여러 작은 서비스로 분리하여 개발, 배포, 확장을 용이하게 하는 접근 방식입니다.', CURRENT_TIMESTAMP(), 6),
('각 마이크로서비스는 독립적으로 배포 가능하며, 서로 다른 기술 스택을 사용할 수 있습니다.', CURRENT_TIMESTAMP(), 6),
('Hibernate는 JPA의 구현체 중 하나로, 객체와 데이터베이스 간의 매핑을 지원합니다.', CURRENT_TIMESTAMP(), 7),
('JPA는 표준 인터페이스를 제공하고, Hibernate는 이를 구현하여 구체적인 기능을 제공합니다.', CURRENT_TIMESTAMP(), 7),
('스프링에서 트랜잭션 관리는 @Transactional 어노테이션을 사용하여 선언적으로 처리할 수 있습니다.', CURRENT_TIMESTAMP(), 8),
('트랜잭션 관리는 데이터 일관성을 유지하고, 롤백 및 커밋을 통해 데이터 무결성을 보장합니다.', CURRENT_TIMESTAMP(), 8),
('Spring Cloud는 마이크로서비스 개발을 위한 다양한 도구와 프레임워크를 제공합니다.', CURRENT_TIMESTAMP(), 9),
('스프링 클라우드는 서비스 디스커버리, 구성 관리, 부하 분산 등의 기능을 지원합니다.', CURRENT_TIMESTAMP(), 9),
('스프링 배치는 대량의 데이터를 처리하기 위한 프레임워크로, 배치 작업의 구성과 실행을 지원합니다.', CURRENT_TIMESTAMP(), 10),
('스프링 배치는 배치 처리의 단계별 실행과 재시작, 실패 복구 등의 기능을 제공합니다.', CURRENT_TIMESTAMP(), 10);


SELECT * FROM ANSWER ;
SELECT * FROM IMAGE ;
SELECT * FROM QUESTION ;
SELECT * FROM USER ;

INSERT INTO user (username, password, email, created_at, image_id) VALUES
('user1', 'password1', 'user1@example.com', '2024-07-09 10:00:00', NULL),
('user2', 'password2', 'user2@example.com', '2024-07-09 10:00:00', NULL),
('user3', 'password3', 'user3@example.com', '2024-07-09 10:00:00', NULL);


// queryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" //

// Querydsl 추가 시작
def querydslDir = "$buildDir/generated/sources/annotationProcessor/java/main"

sourceSets {
	main {
		java {
			srcDirs += querydslDir
		}
	}
}

configurations {
	querydsl {
		extendsFrom compileClasspath
	}
}

task generateQueryDSL(type: JavaCompile) {
	source = sourceSets.main.java
	classpath = configurations.compileClasspath
	options.annotationProcessorPath = configurations.querydsl
	destinationDirectory = file(querydslDir)
	options.compilerArgs = [
			'-proc:only',
			'-processor', 'com.querydsl.apt.jpa.JPAAnnotationProcessor'
	]
}

compileJava {
	dependsOn generateQueryDSL
}



// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(querydslDir)
}
//querydsl 추가 끝



public interface QuestionRepository extends JpaRepository<Question, Long>, QuerydslPredicateExecutor<Question> {

    Question findBySubject(String subject);
    List<Question> findBySubjectLike(String subject);

    @Query("SELECT q FROM Question q JOIN FETCH q.answerList WHERE q.id = :id")
    Optional<Question> findByIdWithAnswers(Long id);


}

1. '고객'은 '매장 직원'에게 "Nike 운동화에 대해 알려주세요"라고 물어봅니다.
2. '매장 직원'은 Nike 운동화를 확인하고, 해당 운동화의 특징(편안함|가벼움 등)과 가격을 자세히 설명해줍니다.

3. '고객'은 '매장 직원'에게 가격을 얻어낸 후, 자신의 결제 가능 여부를 확인한다.
     3- 1. 만약 잔액 부족으로 결제 가능하지 않다면, '고객'은 '다음에 올게요'라고 하고 자신의 상태를 말하고 상황이 종료됩니다.

4. '고객'이 결제가 가능하다면 '매장 직원'은 Nike 브랜드의 운동화의 재고 여부를 확인합니다.
     4-1.  만약 재고가 있는 경우, '매장 직원'은 재고 있음을 말합니다.

	   4-1-0: '고객'은 주문 계속 진행합니다. 
               4-1-0: '매장 직원'은 '고객'에게 신발가격 결제를 안내합니다.
               4-1-1: '고객'은 결제를 진행합니다.
               4-1-2: '매장 직원'은 자신의 매상에 돈을 더합니다.
               4-1-3: '매장 직원'은 운동화를 찾아 '고객'에게 전달합니다.
               4-1-4: '고객'은 신규 구매한 Nike 브랜드의 운동화를 신고, 운동화의 특징(편안함| 가벼움 등)을 경험하며 기분이 좋아집니다. 자신의 상태를 말하고 상황이 종료됩니다.

5. '매장 직원'은 '고객'에게 재고 부족을 안내하고 물품배송 요청 여부를 안내합니다.
	    5-1: 만약 '고객'의 배송 주문을 선호하지 않는 사람일 경우   
                 5-1-0: '고객'은 '다음에 올게요'라고 하고 자신의 상태를 말하고 상황이 종료됩니다.

6. '고객'의 배송 주문을 선호하는 사람일 경우, '고객'은 주문 계속 진행합니다. 
			 6-0:	'매장 직원'은 '고객'에게 신발가격 결제를 안내합니다.
       6-1: '고객'은 결제를 진행합니다.
       6-2: '매장 직원'은 자신의 매상에 돈을 더합니다.

       6-3: '매장 직원'은 운동화를 배송하기 위해 '배송 담당자'에게  Nike 운동화 요청합니다.
       6-4: '배송 담당자'는 택배 패키지의 배송 예정소요 일자와 배송료를 '매장직원'에게 응답 해줍니다.
     	 6-5: '매장 직원'은 배송 예정 소요일자와 배송료를 말해주고, 배송료 + 신발가격을 '고객'에게 전달합니다.

             		 6-5-1: 만약 배송료 + 신발가격이 고객의 잔고보다 많은 경우
                    		6-5-1-0: '고객'은 신발 가격을 환불 요청합니다.
                    		6-5-1-1: '매장 직원'은 신발 가격을 다시 매상에서 빼고, '고객'은 환불 받습니다.
                     		6-5-1-2 '고객'은 '다음에 올게요'라고 하고 자신의 상태를 말하고 상황이 종료됩니다.

            		             6-5-2: 만약 배송료 + 신발가격이 고객의 잔고보다 많지 않은 경우
                    		6-5-2-0: '고객'은 주문 계속 진행합니다.

			                  6-5-2-1: '배송 담당자'는 Nike 운동화 요청 받아 운동화가 들어있는 택배 패키지를 만듭니다.
                     		6-5-2-2: '배송 담당자'는 '고객'에게 택배 패키지를 전달합니다.

                     		6-5-2-3: '고객'은 '배송 담당자' 에게 배송료를 지불합니다. 
                     		6-5-2-4: '배송 담당자'는 '자신의 매상'에 돈을 더합니다.
                     		6-5-2-5: '고객'은 택배 패키지의 운동화를 신고, 운동화의 특징(편안함| 가벼움 등)을 경험하며 기분이 좋아집니다. 자신의 상태를 말하고 상황이 종료됩니다.

